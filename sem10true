//task1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct bin{
    char* value;
    int count;
    struct bin* left;
    struct bin* right;
};
char* newstring(char* str);
struct bin* push(struct bin* head, char* str);
void show(struct bin* head, int mod);
int main()
{
    int mod;
    char c1[] = "asc"; char c2[] = "desc";
    char* temp = (char*)malloc(sizeof(char));
    printf("Put mod:\n");
    scanf("%s", temp);
    while((strcmp(temp, c1) != 0) &&(strcmp(temp, c2) != 0)){
        printf("ERROR. Put mod:\n");
        scanf("%s", temp);
    }
    mod = strcmp(temp, c1);
    char* filename = (char*)malloc(sizeof(char));
    printf("Put filename:\n");
    scanf("%s", filename);
    struct bin* head = NULL;


    FILE* f = fopen(filename, "r");
    printf("mod = %d\n", mod);
    while(fscanf(f,"%s", temp) != EOF) {
        printf("%s\n",temp);
        head = push(head, temp);
    }
    show(head, mod);
    free(head);
    free(temp);
    free(filename);
    return 0;
}
void show(struct bin* head, int mod){
    if(head!=NULL){
        if(mod == 0){
            show(head->left,mod);
            printf("%d - %s\n", head->count, head->value);
            show(head->right, mod);
        }
        else{
            show(head->right, mod);
            printf("%d - %s\n", head->count, head->value);
            show(head->left,mod);
        }

    }
}
struct bin* push(struct bin* head, char* str){
    int cond;
    if(head==NULL){
        head = (struct bin*)malloc(sizeof(struct bin));
        head->value = newstring(str);
        head->left = head->right = NULL;
        head->count = 1;
    }
    else if((cond = strcmp(str,head->value)) == 0){
        head->count++;
    }
    else if(cond<0){
        head->left = push(head->left, str);
    }
    else{
        head->right = push(head->right, str);
    }
    return head;
}

char* newstring(char* str) {
    char* newstr = (char*)malloc(sizeof(char));
    if(newstr!=NULL){
        strcpy(newstr,str);
    }
    return newstr;
}


//task2
/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct nlist {
    char nlist* next;
    char* town;
    int people;
};
#define HASHSIZE 15

struct nlist* lookup(char* s);
static struct nlist *hashtab[HASHSIZE];
struct nlist* install(char* name, int value);
unsigned hash(char* s);
void plist();
int main()
{
    int f = -1;
    char* town = (char*) malloc(sizeof(char));
    int people = 0;
    while(f!=0){
        printf("Menu:\n1 add\n2 delete\n3 list\n");
        scanf("f");
        switch(f){
            case 1:
                printf("Put town:\n");
                scanf("%s", town);
                printf("Put people:\n");
                scanf("%d", &people);
                if(install(town, people))
                    printf("success\n");
                else
                    printf("error\n");
                break;
            case 2:
                
                break:
            case 3:
                plist();
                break;
        }
        
    }
    printf("Hello World");

    return 0;
}

void plist(){
    for(int i = 0; i<HASHSIZE; i++){
        struct nlist* tp;
        for(tp = hashtab[i]; tp!=NULL; tp = tp->next){
            printf("%s;%d\n", tp->town, tp->people);
        }
    }
}

struct nlist* lookup(char* s){
    struct nlist* np;
    for(np = hashtab[hash(s)]; np!=NULL; np = np->next)
        if(strcmp(s, np->town) == 0)
            return np;
    return NULL;
}
struct nlist* install(char* name, int value){
    struct nlist* np;
    unsigned hashval;
    if ((np = lookup(name)) == NULL){
        np = (struct nlist*) malloc(sizeof(struct nlist));
        if(np = NULL || (np->town = strdup(value)) == NULL)
            return NULL;
        hashval = hash(name);
        np->next = hashtab[hashval];
        hashtab[hashval] = np;
    } else
        free((void*) np->town);
    if((np->town = strdup(value)) == NULL)
        return NULL;
    return np;
}
unsigned hash(char* s){
    unsigned hashval;
    for(hashval = 0; *s!='\0'; s++)
        hashval = *s + 17 * hashval;
    return hashval % HASHSIZE;
}
